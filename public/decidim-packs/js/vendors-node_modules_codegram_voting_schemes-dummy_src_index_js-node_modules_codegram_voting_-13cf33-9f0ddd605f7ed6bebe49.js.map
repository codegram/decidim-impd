{"version":3,"file":"js/vendors-node_modules_codegram_voting_schemes-dummy_src_index_js-node_modules_codegram_voting_-13cf33-9f0ddd605f7ed6bebe49.js","sources":["webpack://decidim/./node_modules/@codegram/voting_schemes-dummy/src/index.js","webpack://decidim/./node_modules/@codegram/voting_schemes-dummy/src/trustee_wrapper.js","webpack://decidim/./node_modules/@codegram/voting_schemes-dummy/src/trustee_wrapper_adapter.js","webpack://decidim/./node_modules/@codegram/voting_schemes-dummy/src/voter_wrapper.js","webpack://decidim/./node_modules/@codegram/voting_schemes-dummy/src/voter_wrapper_adapter.js","webpack://decidim/./node_modules/@codegram/voting_schemes-electionguard/src/index.js","webpack://decidim/./node_modules/@codegram/voting_schemes-electionguard/src/trustee_wrapper_adapter.js","webpack://decidim/./node_modules/@codegram/voting_schemes-electionguard/src/voter_wrapper_adapter.js","webpack://decidim/./node_modules/@codegram/voting_schemes-electionguard/src/wrapper_adapter.js"],"sourcesContent":["import { TrusteeWrapperAdapter } from \"./trustee_wrapper_adapter\";\nimport { VoterWrapperAdapter } from \"./voter_wrapper_adapter\";\n\nexport { TrusteeWrapperAdapter, VoterWrapperAdapter };\n","export const CREATED = 0;\nexport const KEY_CEREMONY = 1;\nexport const KEY_CEREMONY_ENDED = 2;\nexport const TALLY = 3;\nexport const TALLY_ENDED = 4;\n\nexport const CREATE_ELECTION = \"create_election\";\nexport const START_KEY_CEREMONY = \"start_key_ceremony\";\nexport const KEY_CEREMONY_STEP_1 = \"key_ceremony.step_1\";\nexport const END_KEY_CEREMONY = \"end_key_ceremony\";\nexport const START_TALLY = \"start_tally\";\nexport const TALLY_CAST = \"tally.cast\";\nexport const TALLY_SHARE = \"tally.share\";\nexport const END_TALLY = \"end_tally\";\n\n/**\n * This is just a dummy implementation of a possible `TrusteeWrapper`.\n * It is based on the dummy voting schema that we are using in the Bulletin Board.\n */\nexport class TrusteeWrapper {\n  /**\n   * Initializes the class with the given params.\n   *\n   * @constructor\n   * @param {Object} params - An object that contains the initialization params.\n   * - {String} trusteeId - The unique id of a trustee.\n   */\n  constructor({ trusteeId }) {\n    this.trusteeId = trusteeId;\n    this.status = CREATED;\n    this.electionPublicKey = 0;\n  }\n\n  /**\n   * Process the message and update the wrapper status.\n   *\n   * @param {String} messageType - The message type.\n   * @param {Object} decodedData - An object with the data to process.\n   *\n   * @returns {Object|undefined}\n   */\n  processMessage(messageType, decodedData) {\n    switch (this.status) {\n      case CREATED: {\n        if (messageType === START_KEY_CEREMONY) {\n          this.status = KEY_CEREMONY;\n          this.electionPublicKey = Math.floor(50 + Math.random() * 200) * 2 + 1;\n\n          return {\n            messageType: KEY_CEREMONY_STEP_1,\n            content: JSON.stringify({\n              election_public_key: this.electionPublicKey,\n              owner_id: this.trusteeId,\n            }),\n          };\n        }\n        break;\n      }\n      case KEY_CEREMONY: {\n        if (messageType === END_KEY_CEREMONY) {\n          this.status = KEY_CEREMONY_ENDED;\n        }\n        break;\n      }\n      case KEY_CEREMONY_ENDED: {\n        if (messageType === START_TALLY) {\n          this.status = TALLY;\n        }\n        break;\n      }\n      case TALLY: {\n        if (messageType === TALLY_CAST) {\n          const contests = JSON.parse(decodedData.content);\n          for (const [question, answers] of Object.entries(contests)) {\n            for (const [answer, value] of Object.entries(answers)) {\n              contests[question][answer] =\n                (value % this.electionPublicKey) * this.electionPublicKey;\n            }\n          }\n\n          return {\n            messageType: TALLY_SHARE,\n            content: JSON.stringify({\n              owner_id: this.trusteeId,\n              contests,\n            }),\n          };\n        } else if (messageType === END_TALLY) {\n          this.status = TALLY_ENDED;\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Whether the trustee wrapper is in a fresh state or no.\n   *\n   * @returns {boolean}\n   */\n  isFresh() {\n    return this.status === CREATED;\n  }\n\n  /**\n   * Returns the wrapper state in a string format.\n   *\n   * @returns {String}\n   */\n  backup() {\n    return JSON.stringify(this);\n  }\n\n  /**\n   * Restore the trustee state from the given state string.\n   *\n   * @param {string} state - As string with the wrapper state retrieved from the backup method.\n   * @returns {boolean}\n   */\n  restore(state) {\n    if (!this.isFresh()) {\n      console.warn(\"Restore not needed\");\n      return false;\n    }\n\n    const result = JSON.parse(state);\n    if (result.trusteeId !== this.trusteeId) {\n      console.warn(\"Invalid trustee id\");\n      return false;\n    }\n\n    if (result.status === CREATED) {\n      console.warn(\"Invalid restored status\");\n      return false;\n    }\n\n    try {\n      Object.assign(this, result);\n    } catch (error) {\n      console.error(error);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Whether the key ceremony process is done or not.\n   * @returns {Boolean}\n   */\n  isKeyCeremonyDone() {\n    return this.status >= KEY_CEREMONY_ENDED;\n  }\n\n  /**\n   * Whether the tally process is done or not.\n   * @returns {Boolean}\n   */\n  isTallyDone() {\n    return this.status >= TALLY_ENDED;\n  }\n}\n","import { TrusteeWrapper } from \"./trustee_wrapper\";\n\n/**\n * This is just a dummy implementation of a possible `TrusteeWrapperAdapter`.\n * It is based on the dummy voting scheme that we are using in the Bulletin Board.\n */\nexport class TrusteeWrapperAdapter {\n  /**\n   * Initializes the class with the given params.\n   *\n   * @constructor\n   * @param {Object} params - An object that contains the initialization params.\n   * - {String} trusteeId - The unique id of a trustee.\n   */\n  constructor({ trusteeId }) {\n    this.trusteeId = trusteeId;\n    this.wrapper = new TrusteeWrapper({ trusteeId });\n  }\n\n  /**\n   * Setup the trustee wrapper.\n   *\n   * @returns {Promise<undefined>}\n   */\n  setup() {}\n\n  /**\n   * Process the message and update the wrapper status.\n   *\n   * @param {String} messageType - The message type.\n   * @param {Object} decodedData - An object with the data to process.\n   *\n   * @returns {Promise<Object|undefined>}\n   */\n  processMessage(messageType, decodedData) {\n    return this.wrapper.processMessage(messageType, decodedData);\n  }\n\n  /**\n   * Whether the trustee wrapper is in a fresh state or no.\n   *\n   * @returns {Promise<Boolean>}\n   */\n  isFresh() {\n    return this.wrapper.isFresh();\n  }\n\n  /**\n   * Returns the wrapper state in a string format.\n   *\n   * @returns {Promise<String>}\n   */\n  backup() {\n    return this.wrapper.backup();\n  }\n\n  /**\n   * Restore the trustee state from the given state string.\n   *\n   * @param {string} state - As string with the wrapper state retrieved from the backup method.\n   * @returns {Promise<Boolean>}\n   */\n  restore(state) {\n    return this.wrapper.restore(state);\n  }\n\n  /**\n   * Whether the key ceremony process is done or not.\n   * @returns {Promise<Boolean>}\n   */\n  isKeyCeremonyDone() {\n    return this.wrapper.isKeyCeremonyDone();\n  }\n\n  /**\n   * Whether the tally process is done or not.\n   * @returns {Promise<Boolean>}\n   */\n  isTallyDone() {\n    return this.wrapper.isTallyDone();\n  }\n}\n","export const CREATE_ELECTION = \"create_election\";\nexport const END_KEY_CEREMONY = \"end_key_ceremony\";\n\n/**\n * This is just a dummy implementation of a possible `VoterWrapper`.\n * It is based on the dummy voting schema that we are using in the Bulletin Board.\n */\n\nexport const WAIT_TIME_MS = 500; // 0.5s\n\nexport class VoterWrapper {\n  constructor({ voterId, waitTime }) {\n    this.voterId = voterId;\n    this.jointElectionKey = null;\n    this.contests = {};\n    this.waitTime = waitTime ?? WAIT_TIME_MS;\n  }\n\n  /**\n   * Process the message and update the wrapper status.\n   *\n   * @param {String} messageType - The message type.\n   * @param {Object} decodedData - An object with the data to process.\n   *\n   * @returns {undefined}\n   */\n  processMessage(messageType, decodedData) {\n    switch (messageType) {\n      case CREATE_ELECTION: {\n        this.contests = decodedData.description.contests;\n        break;\n      }\n      case END_KEY_CEREMONY: {\n        const content = JSON.parse(decodedData.content);\n        this.jointElectionKey = content.joint_election_key;\n        break;\n      }\n    }\n  }\n\n  /**\n   * Converts the given vote into an auditable ballot and an encrypted Ballot. As the process is very fast,\n   * it simulates the delay of the encryption process.\n   *\n   * @param {Object} plainVote - An object with the choosen answers for each question.\n   * @param {String} ballotStyle - The ballot style identifier.\n   *\n   * @private\n   * @returns {Promise<Object|undefined>}\n   */\n  async encrypt(plainVote, _ballotStyle) {\n    return new Promise((resolve) => setTimeout(resolve, WAIT_TIME_MS)).then(\n      () => {\n        if (!this.jointElectionKey) {\n          console.warn(\"Invalid election status.\");\n          return;\n        }\n\n        const auditableData = this.createAuditableBallot(plainVote);\n        const encryptedData = JSON.stringify(\n          this.createEncryptedData(JSON.parse(JSON.stringify(auditableData)))\n        );\n\n        return { auditableData, encryptedData };\n      }\n    );\n  }\n\n  /**\n   * Encrypts the given vote into an object with the format expected by the Dummy voting scheme,\n   * using the silly encryption defined by the scheme for each answer ((1|0) + random * jointElectionKey).\n   * Returns the auditable vote.\n   *\n   * @param {Object} vote - An object with the choosen answers for each question.\n   *\n   * @private\n   * @returns {<Object>}\n   */\n  createAuditableBallot(vote) {\n    /* eslint-disable camelcase */\n    return {\n      ballot_style: \"ballot-style\",\n      contests: this.contests.map(({ object_id, ballot_selections }) => {\n        return {\n          object_id,\n          ballot_selections: ballot_selections.map((ballotSelection) => {\n            const random = Math.random();\n            const plaintext =\n              vote[object_id] &&\n              vote[object_id].includes(ballotSelection.object_id)\n                ? 1\n                : 0;\n\n            return {\n              object_id: ballotSelection.object_id,\n              ciphertext:\n                plaintext + Math.floor(random * 500) * this.jointElectionKey,\n              random,\n              plaintext,\n            };\n          }),\n        };\n      }),\n    };\n    /* eslint-enable camelcase */\n  }\n\n  /**\n   * Creates an encrypted data.\n   *\n   * @param {Object} vote - An object with the encrypted vote.\n   *\n   * @private\n   * @returns {<Object>}\n   */\n  createEncryptedData(vote) {\n    const encryptedBallot = this.removeAuditInformation(vote);\n    return encryptedBallot;\n  }\n\n  /**\n   * Removes the 'random' and 'plaintext' fields from the auditable ballot.\n   *\n   * @param {Object} ballot - An auditable ballot.\n   *\n   * @private\n   * @returns {<Object>}\n   */\n  removeAuditInformation(ballot) {\n    /* eslint-disable camelcase */\n    ballot.contests.map((contest) => {\n      return contest.ballot_selections.map((ballot_selection) => {\n        delete ballot_selection.random;\n        delete ballot_selection.plaintext;\n\n        return ballot_selection;\n      });\n    });\n\n    return ballot;\n    /* eslint-enable camelcase */\n  }\n}\n","import { VoterWrapper } from \"./voter_wrapper\";\n\n/**\n * This is just a dummy implementation of a possible `VoterWrapperAdapter`.\n * It is based on the dummy voting scheme that we are using in the Bulletin Board.\n */\nexport class VoterWrapperAdapter {\n  /**\n   * Initializes the class with the given params.\n   *\n   * @constructor\n   * @param {Object} params - An object that contains the initialization params.\n   * - {String} voterId - The unique id of a trustee.\n   * - {String} waitTime - The time to wait to simulate the real encryption time.\n   * -\n   */\n  constructor({ voterId, waitTime }) {\n    this.voterId = voterId;\n    this.wrapper = new VoterWrapper({ voterId, waitTime });\n  }\n\n  /**\n   * Setup the voter wrapper.\n   *\n   * @returns {Promise<undefined>}\n   */\n  setup() {}\n\n  /**\n   * Processes the message and updates the wrapper status.\n   *\n   * @param {String} messageType - The message type.\n   * @param {Object} decodedData - An object with the data to process.\n   *\n   * @returns {Promise<Object|undefined>}\n   */\n  processMessage(messageType, decodedData) {\n    return this.wrapper.processMessage(messageType, decodedData);\n  }\n\n  /**\n   * Encrypts the plain vote using the wrapper and returns an object with the\n   * encrypted data and the auditable data known as ballot.\n   *\n   * @param {Object} plainVote - An object with the choosen answers for each question.\n   * @param {String} ballotStyle - The ballot style identifier.\n   *\n   * @private\n   * @returns {Promise<Object|undefined>}\n   */\n  encrypt(plainVote, ballotStyle) {\n    return this.wrapper.encrypt(plainVote, ballotStyle);\n  }\n}\n","import { TrusteeWrapperAdapter } from \"./trustee_wrapper_adapter\";\nimport { VoterWrapperAdapter } from \"./voter_wrapper_adapter\";\n\nexport { TrusteeWrapperAdapter, VoterWrapperAdapter };\n","import { WrapperAdapter } from \"./wrapper_adapter\";\n\n/**\n * This implements the Electionguard Trustee Wrapper Adapter using a web worker\n * that executes python code compiled through `pyodide`.\n * @extends WrapperAdapter\n */\nexport class TrusteeWrapperAdapter extends WrapperAdapter {\n  /**\n   * Initializes the class with the given params.\n   *\n   * @constructor\n   * @param {Object} params - An object that contains the initialization params.\n   * - {String} trusteeId - The unique id of a trustee.\n   */\n  constructor({ trusteeId, workerUrl }) {\n    super();\n\n    this.trusteeId = trusteeId;\n    this.worker = new Worker(workerUrl);\n  }\n\n  /**\n   * Setup the trustee wrapper.\n   *\n   * @returns {Promise<undefined>}\n   */\n  setup() {\n    return this.processPythonCodeOnWorker(\n      `\n        from js import trustee_id\n        from bulletin_board.electionguard.trustee import Trustee\n        trustee = Trustee(trustee_id)\n      `,\n      {\n        trustee_id: this.trusteeId,\n      }\n    );\n  }\n\n  /**\n   * Process the message and update the wrapper status.\n   *\n   * @param {String} messageType - The message type.\n   * @param {Object} decodedData - An object with the data to process.\n   *\n   * @returns {Promise<Object|undefined>}\n   */\n  async processMessage(messageType, decodedData) {\n    const result = await this.processPythonCodeOnWorker(\n      `\n      import json\n      from js import message_type, decoded_data\n      trustee.process_message(message_type, json.loads(decoded_data))\n    `,\n      {\n        message_type: messageType,\n        decoded_data: JSON.stringify(decodedData),\n      }\n    );\n\n    if (result && result.length > 0) {\n      // eslint-disable-next-line camelcase\n      const [{ message_type, content }] = result;\n      return {\n        messageType: message_type,\n        content,\n      };\n    }\n  }\n\n  /**\n   * Whether the trustee wrapper is in a fresh state or no.\n   *\n   * @returns {Promise<Boolean>}\n   */\n  isFresh() {\n    return this.processPythonCodeOnWorker(\n      `\n      trustee.is_fresh()\n    `\n    );\n  }\n\n  /**\n   * Returns the wrapper state in a string format.\n   *\n   * @returns {Promise<String>}\n   */\n  backup() {\n    return this.processPythonCodeOnWorker(\n      `\n      trustee.backup().hex()\n    `\n    );\n  }\n\n  /**\n   * Restore the trustee state from the given state string.\n   *\n   * @param {string} state - As string with the wrapper state retrieved from the backup method.\n   * @returns {Promise<Boolean>}\n   */\n  restore(state) {\n    return this.processPythonCodeOnWorker(\n      `\n      from js import state\n\n      trustee = Trustee.restore(bytes.fromhex(state))\n      True\n    `,\n      {\n        state,\n      }\n    );\n  }\n\n  /**\n   * Whether the key ceremony process is done or not.\n   *\n   * @returns {Promise<Boolean>}\n   */\n  isKeyCeremonyDone() {\n    return this.processPythonCodeOnWorker(\n      `\n      trustee.is_key_ceremony_done()\n    `\n    );\n  }\n\n  /**\n   * Whether the tally process is done or not.\n   *\n   * @returns {Promise<Boolean>}\n   */\n  isTallyDone() {\n    return this.processPythonCodeOnWorker(\n      `\n      trustee.is_tally_done()\n    `\n    );\n  }\n}\n","import { WrapperAdapter } from \"./wrapper_adapter\";\n\n/**\n * This implements the Electionguard Voter Wrapper Adapter using a web worker\n * that executes python code compiled through `pyodide`.\n * @extends WrapperAdapter\n */\nexport class VoterWrapperAdapter extends WrapperAdapter {\n  /**\n   * Initializes the class with the given params.\n   *\n   * @constructor\n   * @param {Object} params - An object that contains the initialization params.\n   * - {String} voterId - The unique id of a voter.\n   */\n  constructor({ voterId, workerUrl }) {\n    super();\n\n    this.voterId = voterId;\n    this.worker = new Worker(workerUrl);\n  }\n\n  /**\n   * Setup the voter wrapper.\n   *\n   * @returns {Promise<undefined>}\n   */\n  setup() {\n    return this.processPythonCodeOnWorker(\n      `\n        from js import voter_id\n        from bulletin_board.electionguard.voter import Voter\n        voter = Voter(voter_id)\n      `,\n      {\n        voter_id: this.voterId,\n      }\n    );\n  }\n\n  /**\n   * Process the message and update the wrapper status.\n   *\n   * @param {String} messageType - The message type.\n   * @param {Object} decodedData - An object with the data to process.\n   *\n   * @returns {Promise<Object|undefined>}\n   */\n  async processMessage(messageType, decodedData) {\n    const result = await this.processPythonCodeOnWorker(\n      `\n      import json\n      from js import message_type, decoded_data\n      voter.process_message(message_type, json.loads(decoded_data))\n    `,\n      {\n        message_type: messageType,\n        decoded_data: JSON.stringify(decodedData),\n      }\n    );\n\n    if (result && result[0]) {\n      // eslint-disable-next-line camelcase\n      const { message_type, content } = result[0];\n      return {\n        messageType: message_type,\n        content,\n      };\n    }\n  }\n\n  /**\n   * Encrypts the plain vote using the wrapper and returns an object with the\n   * encrypted data and the auditable data known as ballot.\n   *\n   * @param {Object} plainVote - An object with the choosen answers for each question.\n   * @param {String} ballotStyle - The ballot style identifier.\n   *\n   * @private\n   * @returns {Promise<Object|undefined>}\n   */\n  async encrypt(plainVote, ballotStyle) {\n    const [auditableData, encryptedData] = await this.processPythonCodeOnWorker(\n      `\n      from js import plain_vote, ballot_style\n      voter.encrypt(plain_vote, ballot_style)\n    `,\n      {\n        plain_vote: plainVote,\n        ballot_style: ballotStyle,\n      }\n    );\n\n    return { auditableData, encryptedData };\n  }\n}\n","/**\n * Common class used by any ElectionGuard adapter to run python code through web workers.\n */\nexport class WrapperAdapter {\n  /**\n   * Runs an arbitrary python code in the web worker.\n   *\n   * @param {String} pythonCode - A string representing valid python code.\n   * @param {Object} pythonData - An Object which values can be referenced from\n   *                              the python code using the js module.\n   * @private\n   * @returns {Promise<Object>}\n   */\n  processPythonCodeOnWorker(pythonCode, pythonData) {\n    return new Promise((resolve, reject) => {\n      this.worker.onmessage = (event) => {\n        resolve(event.data.results);\n      };\n\n      this.worker.onerror = (error) => {\n        console.error(error);\n        reject(error);\n      };\n\n      this.worker.postMessage({\n        python: pythonCode,\n        ...pythonData,\n      });\n    });\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;ACnKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;ACnhJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;;;;;;;;;;;;ACvhjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;A","sourceRoot":""}